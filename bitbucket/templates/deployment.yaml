apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bitbucket.fullname" . }}
  labels:
    {{- include "bitbucket.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "bitbucket.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
      {{- include "bitbucket.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bitbucket.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      {{- if .Values.caCerts.enabled }}
      initContainers:
        - name: ca-certs
          image: adoptopenjdk:hotspot
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
          command: ["sh"]
          args: ["-c", "cp -f \"${JAVA_HOME}/lib/security/cacerts\" /var/atlassian/application-data/bitbucket/cacerts; for f in /var/atlassian/application-data/bitbucket/secrets/cas/*; do keytool -importcert -file \"${f}\" -alias \"$(basename \"${f}\")\" -keystore /var/atlassian/application-data/bitbucket/cacerts -storepass changeit -trustcacerts -noprompt; done;"]
          volumeMounts:
            - mountPath: /var/atlassian/application-data/bitbucket
              name: {{ include "bitbucket.pvcname" . }}
            - mountPath: /var/atlassian/application-data/bitbucket/secrets/cas
              name: bitbucket-cas
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ printf "%s:%s" .Values.image.repository (.Values.image.tag | default (printf "%s-jdk11" .Chart.AppVersion)) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: JVM_MINIMUM_MEMORY
              value: {{ .Values.envVars.jvmMinHeapSize | quote }}
            - name: JVM_MAXIMUM_MEMORY
              value: {{ .Values.envVars.jvmMaxHeapSize | quote }}
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
            {{- if .Values.caCerts.enabled }}
              value: {{ printf "-Djavax.net.ssl.trustStore=/var/atlassian/application-data/bitbucket/cacerts %s %s -Dsynchrony.memory.max=%s" .Values.envVars.jvmAdditionalMemoryOptions .Values.envVars.jvmAdditionalOptions .Values.envVars.synchronyMaxMemory | trim | quote }}
            {{- else }}
              value: {{ printf "%s %s -Dsynchrony.memory.max=%s" .Values.envVars.jvmAdditionalMemoryOptions .Values.envVars.jvmAdditionalOptions .Values.envVars.synchronyMaxMemory | trim | quote }}
            {{- end }}
            {{- if .Values.ingress.enabled }}
            - name: ATL_PROXY_NAME
              value: {{ index .Values.ingress.hosts 0 | quote }}
            - name: ATL_PROXY_PORT
              value: {{ if .Values.ingress.tls }}"443"{{ else }}"80"{{ end }}
            - name: ATL_TOMCAT_SCHEME
              value: {{ if .Values.ingress.tls }}"https"{{ else }}"http"{{ end }}
            - name: ATL_TOMCAT_SECURE
              value: {{ if .Values.ingress.tls }}"true"{{ else }}"false"{{ end }}
            {{- end }}
            {{- if .Values.postgresql.enabled }}
            - name: ATL_JDBC_URL
              value: "jdbc:postgresql://{{ include "bitbucket.postgresql.fullname" . }}:{{ .Values.postgresql.service.port | default "5432" }}/{{ .Values.postgresql.postgresqlDatabase }}"
            - name: ATL_JDBC_USER
              value: {{.Values.postgresql.postgresqlUsername | quote }}
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.postgresql.existingSecret }}
                  name:  {{ .Values.postgresql.existingSecret }}
                  {{- else }}
                  name:  {{ include "bitbucket.postgresql.fullname" . }}
                  {{- end }}
                  key: postgresql-password
            - name: ATL_DB_TYPE
              value: "postgresql"
            {{- else if .Values.psql }}
            - name: ATL_JDBC_URL
              value: "jdbc:postgresql://{{ .Values.psql.host }}:{{ .Values.psql.port | default "5432" }}/{{ .Values.psql.database }}"
            - name: ATL_JDBC_USER
              value: {{ .Values.psql.username | quote }}
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.psql.password.secret }}
                  key: {{ .Values.psql.password.key }}
            - name: ATL_DB_TYPE
              value: "postgresql"
            {{- end }}
            {{- with .Values.env }}
            {{- . | toYaml | trim | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 7990
              protocol: TCP
            - name: synchrony
              containerPort: 7999
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          volumeMounts:
            - mountPath: /var/atlassian/application-data/bitbucket
              name: {{ include "bitbucket.pvcname" . }}
          resources:
            {{- .Values.resources | toYaml | trim | nindent 12 }}
      volumes:
        - name: {{ include "bitbucket.pvcname" . }}
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "bitbucket.pvcname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.caCerts.enabled }}
        - name: bitbucket-cas
          secret:
            secretName: {{ .Values.caCerts.secret }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
